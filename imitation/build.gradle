plugins {
   id 'java'
   id 'org.xbib.gradle.plugin.git' version '2.0.0'
   id 'org.jbake.site' version '5.5.0'
   id 'project-report'
   id 'org.hidetake.ssh' version '2.9.0'
}


java {
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    jcenter()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}


test {
    ignoreFailures = true
    useJUnitPlatform()
}
/*test.ignoreFailures=true
check.dependsOn htmlDependencyReport

task reports (dependsOn: ['javadoc', 'check']) {
    description 'Generate all reports for this project'
}


task copyJDocs (type: Copy) {
     from 'build/docs'
    into 'build/tmp/website/assets'
    dependsOn 'javadoc'
}

task copyReports (type: Copy) {
     from 'build/reports'
    into 'build/tmp/website/assets'
    dependsOn 'reports'
}
task copyJbakeTemplates (type: Copy) {
     from 'src/jbake'
    into 'build/tmp/website'
}

task buildHomePage (dependsOn: copyJbakeTemplates) {
	 inputs.files ( 'build/tmp/website/content/home.md', '../README.md')
	 outputs.file ( 'build/tmp/website/content/home.md' )
	 doLast  {
	     outputs.files.singleFile.withOutputStream { out ->
	         for ( file in inputs.files ) file.withInputStream {
		 	     out << it << '\n' }
	    }
	 }
}

jbake {
	 srcDirName = "build/tmp/website"
}

task setupWebsite (dependsOn: ['buildHomePage', 'copyReports', 'copyJDocs']){
}
bake.dependsOn "setupWebsite"*/

task reports (dependsOn: ['javadoc', 'test']) {
    description 'Generate all reports for this project'
}



task clonePages() {
    doLast {
        mkdir 'build/gh-pages'
        def thisRepo = "$buildDir/../.."
        def pagesDir = "$buildDir/gh-pages"
            project.delete {
            delete pagesDir
        }

         def grgit = git.clone {
            dir = pagesDir
            uri = thisRepo//'https://github.com/Arobe022/GitLab2.git'
            //remote='git@github.com:Arobe022/GitLab2.git'
            bare = false
            refToCheckout = 'gh-pages'
            
        }
       /*System.out.println(dir);
        System.out.println(uri);
        System.out.println(remote);
        System.out.println(refToCheckout);*/
        grgit.checkout {
            branch = 'gh-pages'
        }
        grgit.close()

    }
}

task copyReport(type: Copy, dependsOn: ['bake','clonePages']) {  
   doLast {
			ant.copy(todir: 'build/gh-pages'){
				fileset(dir: 'build/jbake')
				}
				/*ant.copy(todir: 'build/reports'){
				fileset(dir: 'build/gh-pages')
				}
						/*ant.move file: "${buildDir}/docs",

                     todir: "${buildDir}/gh-pages"
                     ant.move file: "${buildDir}/reports",

                     todir: "${buildDir}/gh-pages"*/

                 }
}

task deployReports (dependsOn:'copyReport') {
    group = "Reporting"
    description  'Copies reports to the gh-pages branch in preparation for a future push to GitHub'
    doLast {
        def pagesDir = "$buildDir/gh-pages"
        def grgit = git.open {
            dir = pagesDir + "/.git"
            
        }
        grgit.add (update: false, patterns: ['reports/'])
        grgit.add (update: true, patterns: ['reports/'])
         grgit.add (update: false, patterns: ['docs/'])
        grgit.add (update: true, patterns: ['docs/'])
        grgit.commit {
            message = "Updating web pages"
        }
        grgit.push {}
        grgit.close()
    }
}

